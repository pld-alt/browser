// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –î–ê–ù–ù–´–ï
const CONFIG = {
    botToken: '8447449736:AAHl74xp0MiTABlqjhziVAfyvnOXQ5xawoE', // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    chatId: '-1003080294263'     // ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞
};

class TelegramSender {
    constructor() {
        this.userData = null;
        this.isInitialized = false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async initialize() {
        if (this.isInitialized) return this.userData;

        try {
            this.userData = await this.collectUserData();
            this.displayUserInfo(this.userData);
            this.isInitialized = true;
            this.updateStatus('–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'success');
            return this.userData;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.updateStatus('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
            throw error;
        }
    }

    // –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async collectUserData() {
        const ip = await this.getUserIP();
        
        return {
            ip: ip,
            userAgent: navigator.userAgent,
            timestamp: new Date().toISOString(),
            url: window.location.href,
            language: navigator.language,
            platform: navigator.platform,
            screen: `${screen.width}x${screen.height}`,
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
            cookies: navigator.cookieEnabled,
            javaEnabled: navigator.javaEnabled ? navigator.javaEnabled() : false,
            doNotTrack: navigator.doNotTrack || '–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è',
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–æ-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            location: await this.getLocationInfo(ip)
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞
    async getUserIP() {
        try {
            // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤
            const services = [
                'https://api.ipify.org?format=json',
                'https://api64.ipify.org?format=json',
                'https://jsonip.com'
            ];

            for (const service of services) {
                try {
                    const response = await fetch(service);
                    const data = await response.json();
                    return data.ip || data.ip;
                } catch (e) {
                    continue;
                }
            }
            return '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å';
        } catch (error) {
            return '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP';
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    async getLocationInfo(ip) {
        if (ip === '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å' || ip === '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP') {
            return '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ';
        }

        try {
            const response = await fetch(`https://ipapi.co/${ip}/json/`);
            const data = await response.json();
            
            return {
                country: data.country_name || '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ',
                city: data.city || '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ',
                region: data.region || '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ',
                timezone: data.timezone || '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ',
                isp: data.org || '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ'
            };
        } catch (error) {
            return '–ì–µ–æ–¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã';
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
    async sendToTelegram() {
        if (!this.isInitialized) {
            await this.initialize();
        }

        this.updateStatus('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', 'loading');
        this.disableButton(true);

        try {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            const message = this.formatTelegramMessage(this.userData);
            
            const response = await fetch(`https://api.telegram.org/bot${CONFIG.botToken}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: CONFIG.chatId,
                    text: message,
                    parse_mode: 'HTML'
                })
            });

            const result = await response.json();

            if (result.ok) {
                this.updateStatus('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram!', 'success');
                this.saveToLocalStorage();
            } else {
                throw new Error(result.description || '–û—à–∏–±–∫–∞ Telegram API');
            }

            return result;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
            this.updateStatus('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error.message, 'error');
            throw error;
        } finally {
            this.disableButton(false);
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
    formatTelegramMessage(data) {
        const locationInfo = typeof data.location === 'object' ? 
            `üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>
   –°—Ç—Ä–∞–Ω–∞: ${data.location.country}
   –ì–æ—Ä–æ–¥: ${data.location.city}
   –†–µ–≥–∏–æ–Ω: ${data.location.region}
   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${data.location.isp}` : 
            `üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ${data.location}`;

        return `üïµÔ∏è <b>–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è</b>

üåê <b>IP –∞–¥—Ä–µ—Å:</b> <code>${data.ip}</code>
üïí <b>–í—Ä–µ–º—è:</b> ${new Date(data.timestamp).toLocaleString('ru-RU')}
üîó <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> ${data.url}

${locationInfo}

üíª <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
   –ë—Ä–∞—É–∑–µ—Ä: ${data.userAgent}
   –Ø–∑—ã–∫: ${data.language}
   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${data.platform}
   –≠–∫—Ä–∞–Ω: ${data.screen}
   –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: ${data.timezone}

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
   Cookies: ${data.cookies ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}
   Java: ${data.javaEnabled ? '–í–∫–ª—é—á–µ–Ω–∞' : '–í—ã–∫–ª—é—á–µ–Ω–∞'}
   Do Not Track: ${data.doNotTrack}

#visitor #tracking`;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    displayUserInfo(data) {
        const userInfoDiv = document.getElementById('userInfo');
        
        const locationText = typeof data.location === 'object' ? 
            `${data.location.city}, ${data.location.country}` : 
            data.location;

        userInfoDiv.innerHTML = `
            <h3>–°–æ–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
            <p><strong>IP –∞–¥—Ä–µ—Å:</strong> ${data.ip}</p>
            <p><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> ${locationText}</p>
            <p><strong>–ë—Ä–∞—É–∑–µ—Ä:</strong> ${data.userAgent.split(' ')[0]}</p>
            <p><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> ${data.platform}</p>
            <p><strong>–≠–∫—Ä–∞–Ω:</strong> ${data.screen}</p>
            <p><strong>–í—Ä–µ–º—è:</strong> ${new Date(data.timestamp).toLocaleString('ru-RU')}</p>
        `;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    updateStatus(message, type) {
        const statusDiv = document.getElementById('status');
        statusDiv.textContent = message;
        statusDiv.className = `status ${type}`;
    }

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏
    disableButton(disabled) {
        const sendBtn = document.getElementById('sendBtn');
        sendBtn.disabled = disabled;
        sendBtn.textContent = disabled ? '‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...' : 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram';
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveToLocalStorage() {
        try {
            const visits = JSON.parse(localStorage.getItem('telegramVisits') || '[]');
            visits.push({
                ...this.userData,
                sentAt: new Date().toISOString()
            });
            localStorage.setItem('telegramVisits', JSON.stringify(visits));
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    showDebugInfo() {
        const debugDiv = document.getElementById('debugInfo');
        const debugData = document.getElementById('debugData');
        
        debugData.textContent = JSON.stringify(this.userData, null, 2);
        debugDiv.style.display = 'block';
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const telegramSender = new TelegramSender();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
async function initializeUserData() {
    await telegramSender.initialize();
}

async function collectAndSend() {
    await telegramSender.sendToTelegram();
}

function showCollectedData() {
    telegramSender.showDebugInfo();
}